{"version":3,"sources":["gameHelpers.js","img/galaxia.jpg","components/styles/StyledTetris.js","tetrominos.js","hooks/useStage.js","components/styles/StyledStage.js","components/styles/StyledCell.js","components/Cell.js","components/Stage.js","components/styles/StyledDisplay.js","components/Display.js","components/StartButton.js","components/Tetris.js","hooks/usePlayer.js","hooks/useGameStatus.js","hooks/useInterval.js","App.js","index.js"],"names":["createStage","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","pos","StyledTetrisWrapper","styled","div","bgImage","StyledTetris","TETROMINOS","0","shape","color","I","J","L","O","S","T","Z","randomTetromino","tetrominos","randTetromino","Math","floor","random","useStage","resetPlayer","useState","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","map","row","cell","forEach","value","collided","reduce","ack","findIndex","prev","unshift","push","sweepRows","StyledStage","props","height","width","StyledCell","type","Cell","console","log","React","memo","Stage","StyledDisplay","gameOver","Display","text","StyledStartButton","button","StartButton","callback","onClick","Tetris","dropTime","setDropTime","setGameOver","setPlayer","rotate","matrix","dir","mtrx","_","index","column","reverse","useCallback","STAGE_WIDTH","clonedPlayer","JSON","parse","stringify","offset","usePlayer","updatePlayerPos","playerRotate","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","movePlayer","drop","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","move","keyCode","role","tabIndex","onKeyDown","e","onKeyUp","App","className","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bb3c584b.chunk.js","sourcesContent":["export const STAGE_WIDTH = 12;\r\nexport const STAGE_HEIGHT = 20;\r\n\r\nexport const createStage = () =>\r\n  Array.from(Array(STAGE_HEIGHT), () => Array(STAGE_WIDTH).fill([0, 'clear']));\r\n\r\nexport const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\r\n\r\n  // for para poder volver(no con forEach)\r\n  for (let y = 0; y < player.tetromino.length; y += 1) {\r\n    for (let x = 0; x < player.tetromino[y].length; x += 1) {\r\n      // 1. chequear donde esta el actual tetromino\r\n      if (player.tetromino[y][x] !== 0) {\r\n        if (\r\n          // 2. chequear que los tetrominos se queden dentro del area de juego (altura)\r\n          // mantenerse dentro del area de juegos\r\n          !stage[y + player.pos.y + moveY] ||\r\n          // 3. chequear que los tetrominos se queden dentro del area de juego (ancho)\r\n          !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\r\n          // 4. checkear si la celda esta limpia\r\n          stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !==\r\n            'clear'\r\n        ) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  // 5. si lo anterior es falso\r\n  return false;\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/galaxia.1bf448cb.jpg\";","import styled from 'styled-components';\r\n// BG Image\r\nimport bgImage from '../../img/galaxia.jpg';\r\n\r\nexport const StyledTetrisWrapper = styled.div`\r\n  width: 100vw;\r\n  height: 100vh;\r\n  background: url(${bgImage}) #000;\r\n  background-size: cover;\r\n  overflow: hidden;\r\n`;\r\n\r\nexport const StyledTetris = styled.div`\r\n  display: flex;\r\n  align-items: flex-start;\r\n  padding: 40px;\r\n  margin: 0 auto;\r\n  max-width: 900px;\r\n  aside {\r\n    width: 100%;\r\n    max-width: 200px;\r\n    display: block;\r\n    padding: 0 20px;\r\n  }\r\n`;","export const TETROMINOS = {\r\n    0: { shape: [[0]], color: '0, 0, 0' },\r\n    I: {\r\n      shape: [[0, 'I', 0, 0], [0, 'I', 0, 0], [0, 'I', 0, 0], [0, 'I', 0, 0]],\r\n      color: '80, 227, 230',\r\n    },\r\n    J: { shape: [[0, 'J', 0], [0, 'J', 0], ['J', 'J', 0]], color: '36, 95, 223' },\r\n    L: {\r\n      shape: [[0, 'L', 0], [0, 'L', 0], [0, 'L', 'L']],\r\n      color: '223, 173, 36',\r\n    },\r\n    O: { shape: [['O', 'O'], ['O', 'O']], color: '223, 217, 36' },\r\n    S: { shape: [[0, 'S', 'S'], ['S', 'S', 0], [0, 0, 0]], color: '48, 211, 56' },\r\n    T: {\r\n      shape: [[0, 0, 0], ['T', 'T', 'T'], [0, 'T', 0]],\r\n      color: '132, 61, 198',\r\n    },\r\n    Z: { shape: [['Z', 'Z', 0], [0, 'Z', 'Z'], [0, 0, 0]], color: '227, 78, 78' },\r\n  };\r\n  \r\n  export const randomTetromino = () => {\r\n    const tetrominos = 'IJLOSTZ';\r\n    const randTetromino =\r\n      tetrominos[Math.floor(Math.random() * tetrominos.length)];\r\n    return TETROMINOS[randTetromino];\r\n  };\r\n  ","import { useState, useEffect } from 'react';\r\nimport { createStage } from '../gameHelpers';\r\n\r\nexport const useStage = (player, resetPlayer) => {\r\n  const [stage, setStage] = useState(createStage());\r\n  const [rowsCleared, setRowsCleared] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setRowsCleared(0);\r\n    //borra las filas completadas y agrega la misma cantidad de filas up\r\n    const sweepRows = newStage =>\r\n      newStage.reduce((ack, row) => {\r\n        if (row.findIndex(cell => cell[0] === 0) === -1) {\r\n          setRowsCleared(prev => prev + 1);\r\n          ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\r\n          return ack;\r\n        }\r\n        ack.push(row);\r\n        return ack;\r\n      }, []);\r\n\r\n    const updateStage = prevStage => {\r\n      // montamos el stage\r\n      const newStage = prevStage.map(row =>\r\n        row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell))\r\n      );\r\n\r\n      // dibuja el  tetromino\r\n      player.tetromino.forEach((row, y) => {\r\n        row.forEach((value, x) => {\r\n          if (value !== 0) {\r\n            newStage[y + player.pos.y][x + player.pos.x] = [\r\n              value,\r\n              `${player.collided ? 'merged' : 'clear'}`,\r\n            ];\r\n          }\r\n        });\r\n      });\r\n      // verifica si obtuvimos alguna puntuación (collided)\r\n      if (player.collided) {\r\n        resetPlayer();\r\n        return sweepRows(newStage);\r\n      }\r\n      return newStage;\r\n    };\r\n\r\n    // actualizaciones\r\n    setStage(prev => updateStage(prev));\r\n  }, [\r\n    player.collided,\r\n    player.pos.x,\r\n    player.pos.y,\r\n    player.tetromino,\r\n    resetPlayer,\r\n  ]);\r\n\r\n  return [stage, setStage, rowsCleared];\r\n};\r\n\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledStage = styled.div`\r\n  display: grid;\r\n  grid-template-rows: repeat(\r\n    ${props => props.height},\r\n    calc(25vw / ${props => props.width})\r\n  );\r\n  grid-template-columns: repeat(${props => props.width}, 1fr);\r\n  grid-gap: 1px;\r\n  border: 2px solid #333;\r\n  width: 100%;\r\n  max-width: 25vw;\r\n  background: #111;\r\n`;","import styled from 'styled-components';\r\n\r\nexport const StyledCell = styled.div`\r\n  width: auto;\r\n  /* border-radius: 5px; */\r\n  background: rgba(${props => props.color}, 0.8);\r\n  border: ${props => (props.type === 0 ? '0px solid' : '4px solid')};\r\n  border-bottom-color: rgba(${props => props.color}, 0.1);\r\n  border-right-color: rgba(${props => props.color}, 1);\r\n  border-top-color: rgba(${props => props.color}, 1);\r\n  border-left-color: rgba(${props => props.color}, 0.3);\r\n`;","import React from 'react';\r\nimport { StyledCell } from './styles/StyledCell';\r\nimport { TETROMINOS } from '../tetrominos';\r\n\r\n// React.memo makes sure we only re-render the changed cells\r\nconst Cell = ({ type }) => (\r\n  <StyledCell type={type} color={TETROMINOS[type].color}>\r\n    {console.log('rerender cell')}\r\n  </StyledCell>\r\n);\r\n\r\nexport default React.memo(Cell);\r\n\r\n","import React from 'react';\r\nimport { StyledStage } from './styles/StyledStage';\r\n\r\nimport Cell from './Cell';\r\n\r\nconst Stage = ({ stage }) => (\r\n  <StyledStage width={stage[0].length} height={stage.length}>\r\n    {stage.map(row => row.map((cell, x) => <Cell key={x} type={cell[0]} />))}\r\n  </StyledStage>\r\n);\r\n\r\nexport default Stage;","import styled from 'styled-components';\r\n\r\nexport const StyledDisplay = styled.div`\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 0 0 20px 0;\r\n  padding: 20px;\r\n  border: 4px solid #333;\r\n  min-height: 30px;\r\n  width: 100%;\r\n  border-radius: 20px;\r\n  color: ${props => (props.gameOver ? 'red' : '#999')};\r\n  background: #000;\r\n  font-family: Pixel, Arial, Helvetica, sans-serif;\r\n  font-size: 0.8rem;\r\n`;","import React from 'react';\r\nimport { StyledDisplay } from './styles/StyledDisplay';\r\n\r\nconst Display = ({ gameOver, text }) => (\r\n  <StyledDisplay gameOver={gameOver}>{text}</StyledDisplay>\r\n);\r\n\r\nexport default Display;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledStartButton = styled.button`\r\n  box-sizing: border-box;\r\n  margin: 0 0 20px 0;\r\n  padding: 20px;\r\n  min-height: 30px;\r\n  width: 100%;\r\n  border-radius: 20px;\r\n  border: none;\r\n  color: white;\r\n  background: #333;\r\n  font-family: Pixel, Arial, Helvetica, sans-serif;\r\n  font-size: 1rem;\r\n  outline: none;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst StartButton = ({ callback }) => (\r\n  <StyledStartButton onClick={callback}>Start Game</StyledStartButton>\r\n);\r\n\r\nexport default StartButton;\r\n\r\n","import React, { useState } from 'react';\r\n\r\nimport { createStage, checkCollision } from '../gameHelpers';\r\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris';\r\n\r\n// Custom Hooks\r\nimport { useInterval } from '../hooks/useInterval';\r\nimport { usePlayer } from '../hooks/usePlayer';\r\nimport { useStage } from '../hooks/useStage';\r\nimport { useGameStatus } from '../hooks/useGameStatus';\r\n\r\n// Components\r\nimport Stage from './Stage';\r\nimport Display from './Display';\r\nimport StartButton from './StartButton';\r\n\r\nconst Tetris = () => {\r\n  const [dropTime, setDropTime] = useState(null);\r\n  const [gameOver, setGameOver] = useState(false);\r\n\r\n  const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\r\n  const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\r\n  const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(\r\n    rowsCleared\r\n  );\r\n\r\n  console.log('re-render');\r\n\r\n  const movePlayer = dir => {\r\n    if (!checkCollision(player, stage, { x: dir, y: 0 })) {\r\n      updatePlayerPos({ x: dir, y: 0 });\r\n    }\r\n  };\r\n\r\n  const keyUp = ({ keyCode }) => {\r\n    if (!gameOver) {\r\n      // Activate the interval again when user releases down arrow.\r\n      if (keyCode === 40) {\r\n        setDropTime(1000 / (level + 1));\r\n      }\r\n    }\r\n  };\r\n\r\n  const startGame = () => {\r\n    // Reset everything\r\n    setStage(createStage());\r\n    setDropTime(1000);\r\n    resetPlayer();\r\n    setScore(0);\r\n    setLevel(0);\r\n    setRows(0);\r\n    setGameOver(false);\r\n  };\r\n\r\n  const drop = () => {\r\n    // Increase level when player has cleared 10 rows\r\n    if (rows > (level + 1) * 10) {\r\n      setLevel(prev => prev + 1);\r\n      // Also increase speed\r\n      setDropTime(1000 / (level + 1) + 200);\r\n    }\r\n\r\n    if (!checkCollision(player, stage, { x: 0, y: 1 })) {\r\n      updatePlayerPos({ x: 0, y: 1, collided: false });\r\n    } else {\r\n      // Game over!\r\n      if (player.pos.y < 1) {\r\n        console.log('GAME OVER!!!');\r\n        setGameOver(true);\r\n        setDropTime(null);\r\n      }\r\n      updatePlayerPos({ x: 0, y: 0, collided: true });\r\n    }\r\n  };\r\n\r\n  const dropPlayer = () => {\r\n    // We don't need to run the interval when we use the arrow down to\r\n    // move the tetromino downwards. So deactivate it for now.\r\n    setDropTime(null);\r\n    drop();\r\n  };\r\n\r\n  // This one starts the game\r\n  // Custom hook by Dan Abramov\r\n  useInterval(() => {\r\n    drop();\r\n  }, dropTime);\r\n\r\n  const move = ({ keyCode }) => {\r\n    if (!gameOver) {\r\n      if (keyCode === 37) {\r\n        movePlayer(-1);\r\n      } else if (keyCode === 39) {\r\n        movePlayer(1);\r\n      } else if (keyCode === 40) {\r\n        dropPlayer();\r\n      } else if (keyCode === 38) {\r\n        playerRotate(stage, 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <StyledTetrisWrapper\r\n      role=\"button\"\r\n      tabIndex=\"0\"\r\n      onKeyDown={e => move(e)}\r\n      onKeyUp={keyUp}\r\n    >\r\n      <StyledTetris>\r\n        <Stage stage={stage} />\r\n        <aside>\r\n          {gameOver ? (\r\n            <Display gameOver={gameOver} text=\"Game Over\" />\r\n          ) : (\r\n            <div>\r\n              <Display text={`Score: ${score}`} />\r\n              <Display text={`rows: ${rows}`} />\r\n              <Display text={`Level: ${level}`} />\r\n            </div>\r\n          )}\r\n          <StartButton callback={startGame} />\r\n        </aside>\r\n      </StyledTetris>\r\n    </StyledTetrisWrapper>\r\n  );\r\n};\r\n\r\nexport default Tetris;\r\n\r\n\r\n","import { useState, useCallback } from 'react';\r\n\r\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\r\nimport { STAGE_WIDTH, checkCollision } from '../gameHelpers';\r\n\r\nexport const usePlayer = () => {\r\n  const [player, setPlayer] = useState({\r\n    pos: { x: 0, y: 0 },\r\n    tetromino: TETROMINOS[0].shape,\r\n    collided: false,\r\n  });\r\n\r\n  function rotate(matrix, dir) {\r\n    // Haz que las filas se conviertan en cols (transponer)\r\n    const mtrx = matrix.map((_, index) => matrix.map(column => column[index]));\r\n    // invierte filas\r\n    if (dir > 0) return mtrx.map(row => row.reverse());\r\n    return mtrx.reverse();\r\n  }\r\n\r\n  function playerRotate(stage, dir) {\r\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\r\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\r\n\r\n    const pos = clonedPlayer.pos.x;\r\n    let offset = 1;\r\n    while (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\r\n      clonedPlayer.pos.x += offset;\r\n      offset = -(offset + (offset > 0 ? 1 : -1));\r\n      if (offset > clonedPlayer.tetromino[0].length) {\r\n        rotate(clonedPlayer.tetromino, -dir);\r\n        clonedPlayer.pos.x = pos;\r\n        return;\r\n      }\r\n    }\r\n    setPlayer(clonedPlayer);\r\n  }\r\n\r\n  const updatePlayerPos = ({ x, y, collided }) => {\r\n    setPlayer(prev => ({\r\n      ...prev,\r\n      pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\r\n      collided,\r\n    }));\r\n  };\r\n\r\n  const resetPlayer = useCallback(() => {\r\n    setPlayer({\r\n      pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\r\n      tetromino: randomTetromino().shape,\r\n      collided: false,\r\n    });\r\n  }, []);\r\n\r\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\r\n};\r\n\r\n\r\n","import { useState, useEffect, useCallback } from 'react';\r\n\r\nexport const useGameStatus = rowsCleared => {\r\n  const [score, setScore] = useState(0);\r\n  const [rows, setRows] = useState(0);\r\n  const [level, setLevel] = useState(0);\r\n\r\n  const linePoints = [40, 100, 300, 1200];\r\n\r\n  const calcScore = useCallback(() => {\r\n    // score\r\n    if (rowsCleared > 0) {\r\n      // calculo de puntucion como se hacia originalmente (?)\r\n      setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\r\n      setRows(prev => prev + rowsCleared);\r\n    }\r\n  }, [level, linePoints, rowsCleared]);\r\n\r\n  useEffect(() => {\r\n    calcScore();\r\n  }, [calcScore, rowsCleared, score]);\r\n\r\n  return [score, setScore, rows, setRows, level, setLevel];\r\n};\r\n","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [delay]);\n}","import React from 'react';\nimport Tetris from './components/Tetris';\n\nconst App = () => (\n  <div className=\"App\">\n    <Tetris />\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n\n"],"sourceRoot":""}